from keras.models import Sequential
from keras import layers
from keras.models import Model
from keras.layers import add, multiply, concatenate, Input, Embedding, Conv1D, Bidirectional, GRU, LSTM, BatchNormalization, MaxPooling1D, GlobalMaxPooling1D, Dense

def CBRNN(input_shape, vocab_size=307, win_size=5, dropout=0.5, recurrent_dropout=0.5):
	embedding_input = Input((input_shape,), dtype='int32')
	emb = Embedding(vocab_size, 64)(embedding_input)

	conv1 = Conv1D(64, 3, activation='relu')(emb)
	conv1 = BatchNormalization()(conv1)
	conv1 = MaxPooling1D(input_shape-2)(conv1)
	conv1_ = Conv1D(64, 3)(emb)
	conv1_ = BatchNormalization()(conv1_)
	conv1_ = MaxPooling1D(input_shape-2)(conv1_)
	x1 = concatenate([conv1,conv1_], axis=1)

	conv2 = Conv1D(64, 5, activation='relu')(emb)
	conv2 = BatchNormalization()(conv2)
	conv2 = MaxPooling1D(input_shape-4)(conv2)
	conv2_ = Conv1D(64, 5)(emb)
	conv2_ = BatchNormalization()(conv2_)
	conv2_ = MaxPooling1D(input_shape-4)(conv2_)
	x2 = concatenate([conv2,conv2_], axis=1)

	conv3 = Conv1D(64, 7, activation='relu')(emb)
	conv3 = BatchNormalization()(conv3)
	conv3 = MaxPooling1D(input_shape-6)(conv3)
	conv3_ = Conv1D(64, 7)(emb)
	conv3_ = BatchNormalization()(conv3_)
	conv3_ = MaxPooling1D(input_shape-6)(conv3_)
	x3 = concatenate([conv3,conv3_], axis=1)

	conv4 = Conv1D(64, 1, activation='relu')(emb)
	conv4 = BatchNormalization()(conv4)
	conv4 = MaxPooling1D(input_shape)(conv4)
	conv4_ = Conv1D(64, 1)(emb)
	conv4_ = BatchNormalization()(conv4_)
	conv4_ = MaxPooling1D(input_shape)(conv4_)
	x4 = concatenate([conv4,conv4_], axis=1)

	x = concatenate([x1,x2,x3,x4], axis=1)
	# x = add([m1,m2,m3])
	# x = concatenate([conv1,conv2,conv3,conv4], axis=-1) 
	# x = GRU(64, dropout=dropout, recurrent_dropout=recurrent_dropout, return_sequences=True)(x)
	x = Bidirectional(GRU(64, dropout=dropout, recurrent_dropout=recurrent_dropout))(x)
	# x = GlobalMaxPooling1D()(x)
	# out = Dense(8, activation='softmax')(x)
	out = Dense(1, activation='sigmoid')(x)
	return Model(embedding_input, out)

if __name__ == '__main__':
	model = CBRNN(100)
	model.summary()
