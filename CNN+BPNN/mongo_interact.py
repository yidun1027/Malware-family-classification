# -*- coding:utf-8 -*-
from pymongo import MongoClient
# import ijson
import json


class Json2Mongo(object):
    def __init__(self):
        self.host = '127.0.0.1'
        self.port = 27017

        self.client = MongoClient(self.host, self.port, unicode_decode_error_handler='ignore')
        
        self.dataset = self.client.test_dataset
        self.malware_db = self.client.cuckoo_nfs_db
        self.benign_db = self.client.cuckoo_nfs_db6

        self.mal_calls = self.malware_db.calls
        self.mal_analysis = self.malware_db.analysis
        
        self.be_calls = self.benign_db.calls
        self.be_analysis = self.benign_db.analysis

        self.malware = self.dataset.malware
        self.benign = self.dataset.benign

        self.loss = self.dataset.loss

    def get_call_id(self, Analysis, Calls, dbname):
        for record in Analysis.find():
            # if _malware['behavior']:
            #     calls = list()
            #     print(_malware['behavior'])
            #     break
            #     behavior = json.loads(_malware['behavior'])
            #     for process in behavior['processes']:
            #         for call in process['calls']:
            #             myquery = {"_id": call['$oid']}
            #             calls += self.calls_search(_malware['_id'], myquery)
            #     data = self.data_generator(_malware['_id'], calls)
            #     self.write_malware(data)
            if 'behavior' in record:
                if record['behavior']:
                    calls = list()
                    # behavior = json.loads(_malware['behavior'])
                    behavior = record['behavior']
                    for process in behavior['processes']:
                        for call in process['calls']:
                            # myquery = {"_id": call['$oid']}
                            myquery = {"_id": call}
                            calls += self.calls_search(Calls, record['_id'], myquery)
                    data = self.data_generator(record['_id'], calls)
                    self.write_db(dbname, data)
            else:
                print("{id} have not behavior".format(id=record['_id']))

    def data_generator(self, _id, calls):
        data = {
            '_id': _id,
            'calls': calls,
        }
        return data

    def calls_search(self, Calls, malware_id, myquery):
        calls = list()
      #  try:
        calls_flow = Calls.find_one(myquery)
        if calls_flow:
            calls_data = calls_flow['calls']
            # calls_data = json.loads(calls_flow['calls'])
            for call in calls_data:
                calls.append(call['api'])
        else:
            print("{call_id} had not found!".format(call_id=myquery['_id']))
            self.loss.update(myquery, myquery, upsert=True)
       #  except Exception as e:
       #     print("search_catch! malware_id={id1}, calls_id={id2}".format(id1=malware_id, id2=myquery['_id']))
        #    self.loss.update_one(myquery, myquery, upsert=True)
         #   print(e)
        return calls

    def write_db(self, dbname, data):
        try:
            myquery = {"_id": data['_id']}
            dbname.update(myquery, data, upsert=True)  
        except Exception as e:
            print("write_error", data['_id'])
            print(e)

    def data_test(self, collection):
        for record in collection.find():
            print(record['calls'])
            break

if __name__ == '__main__':
    jm = Json2Mongo()
    # jm.write_database()
    jm.get_call_id(jm.mal_analysis, jm.mal_calls, jm.malware)

    jm.get_call_id(jm.be_analysis, jm.be_calls, jm.benign)

    # jm.data_test(jm.malware)
    # jm.data_test(jm.benign)
    # print(jm.loss)
    # myquery = {"_id": "5e1f134bdfa067752182eefd"}
    # jm.calls_search("1", myquery)
