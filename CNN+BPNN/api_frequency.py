# -*- coding:utf-8 -*-
from pymongo import MongoClient
from common.read_windows_api import get_api_desribe


def read_api_index(txt_name):
    # github公开的apiindex里缺少108附近的2条记录，因为这次只是统计频率 所以对它进行重新编号了
    # 后面频率统计的结果就是340纬度的向量
    api_dict = {}
    api_list = []
    id=0
    with open(txt_name, 'r') as file_to_read:
        while True:
            lines = file_to_read.readline().strip()  # 整行读取数据
            if not lines:
                break
            equal_pos = lines.find("=")
            api=lines[:equal_pos]
            api_list.append(api)
            api_dict[api] = id
            id+=1
    return api_list, api_dict


class read_from_Mongo(object):
    def __init__(self):
        self.host = '192.168.105.224'
        self.port = 27017

        self.client = MongoClient(self.host, self.port, unicode_decode_error_handler='ignore')

        self.save_to = self.client.feature_api_frequency
        self.read_from = self.client.cuckoo_nfs_db5

        self.source_calls = self.read_from.calls
        self.source_analysis = self.read_from.analysis

        self.saved_calls = self.save_to.from_nfs_db5

        self.loss = self.save_to.loss

        self.cur_api_dict={}

    def get_call_frequency(self, Analysis, Calls, dbname):
        count = 0
        api_list, api_dict = read_api_index("Apiindex.txt")
        api_num=len(api_list)

        for record in Analysis.find():
            if 'behavior' in record:
                if record['behavior']:
                    count += 1
                    frequency_vec=[0]*api_num
                    self.cur_api_dict.clear()
                    behavior = record['behavior']
                    for process in behavior['processes']:
                        for call in process['calls']:
                            myquery = {"_id": call}
                            self.calls_search(Calls, myquery)
                    if len(self.cur_api_dict) < 10:
                        continue
                    apis_sum=0
                    match_num=0
                    for api in self.cur_api_dict:
                        apis_sum+=self.cur_api_dict[api]
                        if api in api_list:
                            match_num+=1
                            frequency_vec[int(api_dict[api])]+=int(self.cur_api_dict[api])
                    frequency_str=','.join([str(i) for i in frequency_vec])
                    data = self.data_generator(record['_id'], frequency_str)
                    print("write into db: no.",count," apis_sum=",apis_sum," match_num=",match_num," len(cur_api_dict)=",len(self.cur_api_dict))
                    self.write_db(dbname, data)
                    del data
            else:
                print("{id} have not behavior".format(id=record['_id']))

    def data_generator(self, _id, frequency_vec):
        data = {
            '_id': _id,
            'frequency_vec': frequency_vec,
        }
        return data

    def calls_search(self, Calls, myquery):
        calls_flow = Calls.find_one(myquery)
        if calls_flow:
            calls_data = calls_flow['calls']
            for call in calls_data:
                api=str(call['api']).lower()
                if api in self.cur_api_dict:
                    self.cur_api_dict[api]+=1
                else:
                    self.cur_api_dict[api]=1
        else:
            print("{call_id} had not found!".format(call_id=myquery['_id']))
            self.loss.update(myquery, myquery, upsert=True)


    def write_db(self, dbname, data):
        try:
            myquery = {"_id": data['_id']}
            dbname.update(myquery, data, upsert=True)
        except Exception as e:
            print("write_error", data['_id'])
            print(e)


if __name__ == '__main__':
    win_list,win_dict=get_api_desribe()
    feature_list,feature_dict=read_api_index("Apiindex.txt")

    count=0
    no_find=[]
    for api in feature_list:
        if api in win_dict:
            count+=1
            print(api,win_dict[api])
        else:
            no_find.append(api)
    print(count)
    print("no_find=",no_find)
    print(len(no_find))

    # id=0
    # valid=0
    # for api in no_find:
    #     doc_url=search_api(api)
    #     print(id,doc_url)
    #     id+=1
    #     if len(doc_url)>0:
    #         valid+=1
    # print("valid:",valid)
    # print("still missing:",len(no_find)-valid)


    # jm = read_from_Mongo()
    # jm.get_call_frequency(jm.source_analysis, jm.source_calls, jm.saved_calls)
