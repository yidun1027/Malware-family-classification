# -*- coding:utf-8 -*-
from pymongo import MongoClient
# import ijson
import json


class read_from_Mongo(object):
    def __init__(self):
        self.host = '192.168.105.224'
        self.port = 27017

        self.client = MongoClient(self.host, self.port, unicode_decode_error_handler='ignore')

        self.save_to = self.client.db_calls
        self.read_from = self.client.cuckoo_nfs_db7

        self.source_calls = self.read_from.calls
        self.source_analysis = self.read_from.analysis

        self.saved_calls = self.save_to.from_nfs_db7_less # less than 100 calls

        self.loss = self.save_to.loss

        self.pre_api=""

    def get_call_id(self, Analysis, Calls, dbname):
        count=0
        for record in Analysis.find():
            if 'behavior' in record:
                if record['behavior']:
                    count += 1
                    calls = list()
                    self.pre_api=""
                    behavior = record['behavior']
                    for process in behavior['processes']:
                        for call in process['calls']:
                            myquery = {"_id": call}
                            calls += self.calls_search(Calls, myquery)
                            if len(calls)>100:
                                break
                        if len(calls) > 100:
                            break

                    data = self.data_generator(record['_id'], calls)
                    self.write_db(dbname, data)
                    del data
                    print("save into db: no.",count)
            else:
                print("{id} have not behavior".format(id=record['_id']))

    def data_generator(self, _id, calls):
        data = {
            '_id': _id,
            'calls': calls,
        }
        return data

    def calls_search(self, Calls, myquery):
        calls = list()
        calls_flow = Calls.find_one(myquery)
        if calls_flow:
            calls_data = calls_flow['calls']
            for call in calls_data:
                if self.pre_api==call['api']:
                    continue
                else:
                    calls.append(call['api'])
                    self.pre_api=call['api']
        else:
            print("{call_id} had not found!".format(call_id=myquery['_id']))
            self.loss.update(myquery, myquery, upsert=True)

        return calls

    def write_db(self, dbname, data):
        try:
            myquery = {"_id": data['_id']}
            dbname.update(myquery, data, upsert=True)
        except Exception as e:
            print("write_error", data['_id'])
            print(e)

    def data_test(self, collection):
        for record in collection.find():
            print(record['calls'])
            break


if __name__ == '__main__':
    jm = read_from_Mongo()
    jm.get_call_id(jm.source_analysis, jm.source_calls, jm.saved_calls)
